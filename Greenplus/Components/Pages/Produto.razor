@page "/produto"
@using System.Linq;
@using Blazored.Typeahead;
@using System.Collections.Generic


<html>
    <head>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    </head>
        @if (!isLogin)
        {
            <div class="sidebar">
                <Greenplus.Components.Layout.NavMenu />
            </div>
        }
    <body>
        <div class="alert alert-danger" role="alert" style="display:@(showDangerAlert ? "block" : "none");text-align: center;">
            @((MarkupString)alertMessage)
        </div>
        <div class="alert alert-success" role="success" style="display:@(showSuccessAlert ? "block" : "none");text-align: center;">
            @((MarkupString)alertMessage)
        </div>

        <div class="form-group categoria">
            <label><strong>Categoria</strong></label>
            <div class="radio-options">
                <label>
                    <input type="radio" @onchange="selectVenda" checked="@((!produto.Categoria))" />
                    Venda
                </label>
                <label>
                <input type="radio" @onchange="selectUso" checked="@((produto.Categoria))" />
                    Uso interno
                </label>
            </div>
        </div>
    @if (!produto.Categoria)
        {
            <div class="form-group">
                <label for="nomePopular">Nome popular</label>

            <input id="nomePopular" @onblur="closeOptions" @oninput="@(e => inputBuscar(e.Value.ToString()))" type="text" @bind="produto.Nome" disabled="@(isDisabled)" />
                @if (opcoes.Any())
                {
                        <div class="opcoes-autocomplete">
                        @foreach (var opcao in opcoes)
                        {
                            <p @onclick="() => selecionar(opcao)">@opcao</p>
                        }
                        </div>
                }
            </div>

            <div class="form-group">
                <label for="nomeCientifico">Nome científico</label>
                <input id="nomeCientifico" type="text" @bind="produto.NomeCientifico" disabled="@(isDisabled)" />
            </div>

            <div class="form-group">
                <label for="classificacao">Classificação</label>
                <select id="classificacao" @bind="produto.Classificacao" disabled="@(isDisabled)">
                    <option value="">Selecione...</option>
                    <option value="Tuberosa">Tuberosa</option>
                    <option value="Hebacias">Hebácias</option>
                    <option value="Fruto">Fruto</option>
                </select>
            </div>

            <div class="row">
                <div class="form-group">
                    <label for="tempoDePlantio">Tempo de plantio / Meses</label>
                    <input id="tempoDePlantio" type="text" @bind="produto.TempoEstimado" disabled="@(isDisabled)"/>
                </div>

                <div class="form-group">
                    <label for="temperatura">Temperatura / °C</label>
                <input id="tempoDePlantio" type="text" @bind="produto.Temperatura" disabled="@(isDisabled)"/>
                </div>
            </div>

            <div class="form-group">
                <label for="irrigacao">Irrigação / Hrs</label>
                <select id="irrigacao" style="width: 50%;" @bind="produto.Irrigacao" disabled="@(isDisabled)">
                    <option value="">Selecione...</option>
                    <option value="4">4 Horas</option>
                    <option value="8">8 Horas</option>
                    <option value="12">12 Horas</option>
                    <option value="16">16 Horas</option>
                    <option value="20">20 Horas</option>
                    <option value="24">24 Horas</option>
                </select>
            </div>

            <div class="form-group">
                <label for="valorVenda">Valor de venda (R$)</label>
                <input id="valorVenda" type="text" style="width: 50%;" @bind="produto.ValorVenda" disabled="@(isDisabled)" />
            </div>

            <footer>
            <button class="bi bi-search btn search-btn" style="background-color:@(isDisabled ? "gray" : "orange")" 
                    @onclick="getProdutoByName" disabled="@(isDisabled)">
            </button>
            <button class="bi bi-trash-fill btn cancel-btn" style="background-color:@(isDisabled ? "gray" : "red")"
                    @onclick="deleteProdutoByName" disabled="@(isDisabled)">
            </button>
            <button class="bi bi-check2 btn confirm-btn" style="background-color:@(isDisabled ? "gray" : "green")"
                    @onclick="postOrEditProdutoByName" disabled="@(isDisabled)">
            </button>
            </footer>
        } else if (produto.Categoria)
        {
            <div class="cadastro-simples">
                <div class="form-group">
                    <label for="nome">Nome</label>
                    <input id="nome" type="text" @onblur="closeOptions" @oninput="@(e => inputBuscar(e.Value.ToString()))" @bind="produto.Nome" disabled="@(isDisabled)" />
                    @if (opcoes.Any())
                    {
                        <div class="opcoes-autocomplete">
                            @foreach (var opcao in opcoes)
                            {
                                <p @onclick="() => selecionar(opcao)">@opcao</p>
                            }
                        </div>
                    }
                </div>

                <div class="form-group">
                    <label for="descricao">Descrição</label>
                    <textarea id="descricao" @bind="produto.Descricao" disabled="@(isDisabled)"></textarea>
                </div>

                <div class="form-group">
                    <label for="estadoConservacao">Estado de conservação</label>
                    <select id="estadoConservacao" @bind="produto.EstadoDeConservacao" disabled="@(isDisabled)">
                        <option value="">Selecione</option>
                        <option value="bom">Bom</option>
                        <option value="regular">Regular</option>
                        <option value="ruim">Ruim</option>
                    </select>
                </div>
            </div>
            <footer>
                <button class="bi bi-search btn search-btn" style="background-color:@(isDisabled ? "gray" : "orange")"
                        @onclick="getProdutoByName" disabled="@(isDisabled)">
                </button>
                <button class="bi bi-trash-fill btn cancel-btn" style="background-color:@(isDisabled ? "gray" : "red")"
                        @onclick="deleteProdutoByName" disabled="@(isDisabled)">
                </button>
                <button class="bi bi-check2 btn confirm-btn" style="background-color:@(isDisabled ? "gray" : "green")"
                        @onclick="postOrEditProdutoByName" disabled="@(isDisabled)">
                </button>
            </footer>
        }
    </body>
</html>

@code {



    // private readonly string connectionString = "Server=;Database=;User Id=;Password=;TrustServerCertificate=True;";

    private bool showDangerAlert = false;
    private bool showSuccessAlert = false;
    private string alertMessage = string.Empty;
    private bool isLogin;
    private bool isDisabled = false;

    private List<string> opcoes = new List<string>();

    public List<Product> produtosExistentes = new List<Product>();
    public HttpClient httpClient = new HttpClient();
    public Product produto = new Product();

    protected override async void OnInitialized()
    {
        isLogin = false;
        produto.Categoria = false;

        var produtosArray = (await httpClient.GetFromJsonAsync<Product[]>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"Categoria\":false}}")).ToList();
        if (produtosArray != null)
        {
            produtosExistentes = produtosArray.ToList();
        }
    }

    public void inputBuscar(string nome)
    {
        if (!string.IsNullOrEmpty(nome))
        {
            opcoes = produtosExistentes
                .Where(x => x.Nome.Contains(nome, StringComparison.OrdinalIgnoreCase))
                .Select(x => x.Nome)
                .ToList();
        } else
        {
            opcoes.Clear();
        }
    }

    private void selecionar(string opcao)
    {
        produto.Nome = opcao;
        opcoes.Clear();
    }

    private void closeOptions()
    {
        opcoes.Clear();
    }

    public async Task getProdutoByName()
    {
        isDisabled = true;
        try
        {
            var query = await httpClient.GetFromJsonAsync<Product[]>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"limite\":1, \"where\":{\"Nome\":\"" + produto.Nome + "\",\"Categoria\":\""+produto.Categoria+"\"}}");

            if (query[0] != null)
            {
                produto = query[0];
                StateHasChanged();

                await Task.Delay(3000);
                showDangerAlert = false;
                isDisabled = false;

                StateHasChanged();
            } else
            {
                alertMessage = $"Produto não encontrado!";
                showDangerAlert = true;
                isDisabled = false;

                StateHasChanged();

                await Task.Delay(3000);
                showDangerAlert = false;

                StateHasChanged();
            }

        } catch
        {
            alertMessage = $"Produto não encontrado!!";
            showDangerAlert = true;
            isDisabled = false;

            StateHasChanged();

            await Task.Delay(3000);
            showDangerAlert = false;

            StateHasChanged();
        }

    }

    public async Task deleteProdutoByName()
    {
        isDisabled = true;

        if (await verificarCamposProduct(produto))
        {
            if (produto.ProdutoId == null)
            {
                alertMessage = $"Produto não encontrado!";
                showDangerAlert = true;
                isDisabled = false;

                StateHasChanged();

                await Task.Delay(3000);
                showDangerAlert = false;

                StateHasChanged();
                return;
            }

            try
            {
                var request = new HttpRequestMessage(HttpMethod.Delete, $"https://rest-node-mztn.onrender.com/{{\"tabela\":\"Produto\", \"where\":{{\"ProdutoId\": \"{produto.ProdutoId}\"}}}}");

                var response = await httpClient.SendAsync(request);

                alertMessage = response.IsSuccessStatusCode
                    ? "Produto deletado com sucesso!"
                    : "Erro ao deletar o produto! Tente novamente.";

                showSuccessAlert = response.IsSuccessStatusCode;
                showDangerAlert = !response.IsSuccessStatusCode;
                if (response.IsSuccessStatusCode) produto = new Product();
                isDisabled = false;

                StateHasChanged();

                await Task.Delay(3000);
                showSuccessAlert = showDangerAlert = false;
                StateHasChanged();

                var produtosArray = (await httpClient.GetFromJsonAsync<Product[]>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"Categoria\":false}}")).ToList();
                if (produtosArray != null)
                {
                    produtosExistentes = produtosArray.ToList();
                }

            } catch
            {
                alertMessage = "Ocorreu um erro ao deletar o produto!<br>Tente novamente.";
                showDangerAlert = true;
                isDisabled = false;
                StateHasChanged();
            }

        } else
        {
            alertMessage = $"Preencha todos os campos para deletar!";
            showDangerAlert = true;
            isDisabled = false;

            StateHasChanged();

            await Task.Delay(3000);
            showDangerAlert = false;

            StateHasChanged();
        }

    }    

    public async Task postOrEditProdutoByName()
    {
        isDisabled = true;

        if (produto.ProdutoId != null) //criar ou não
        {
            if (await verificarCamposProduct(produto))
            {
                try
                {
                    if (produto.Categoria)
                    {
                        var query = await httpClient.PatchAsJsonAsync<Product>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"ProdutoId\":\"" + produto.ProdutoId + "\"},\"update\":{\"Categoria\":\"" + produto.Categoria + "\", \"Nome\":\"" + produto.Nome + "\", \"Descricao\":\"" + produto.Descricao + "\", \"EstadoDeConservacao\":\"" + produto.EstadoDeConservacao + "\"}}", null);
                    } else
                    {
                        await httpClient.PatchAsJsonAsync<Product>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"ProdutoId\":\"" + produto.ProdutoId + "\"},\"update\":{\"Categoria\":\"" + produto.Categoria + "\", \"Nome\":\"" + produto.Nome + "\", \"NomeCientifico\":\"" + produto.NomeCientifico + "\", \"Classificacao\":\"" + produto.Classificacao + "\", \"TempoEstimado\":" + produto.TempoEstimado + ", \"Temperatura\":" + produto.Temperatura + ", \"Irrigacao\":" + produto.Irrigacao + ", \"ValorVenda\":" + produto.ValorVenda + "}}", null);
                    }

                    alertMessage = $"Produto editado com sucesso!";
                    showSuccessAlert = true;
                    isDisabled = false;

                    StateHasChanged();

                    await Task.Delay(3000);
                    showSuccessAlert = false;

                    StateHasChanged();

                    var produtosArray = (await httpClient.GetFromJsonAsync<Product[]>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"Categoria\":false}}")).ToList();
                    if (produtosArray != null)
                    {
                        produtosExistentes = produtosArray.ToList();
                    }

                    produto = new Product();

                } catch
                {

                    alertMessage = $"Ocorreu um erro ao editar o produto!<br>Tente novamente.";
                    showDangerAlert = true;
                    isDisabled = false;

                    StateHasChanged();

                    await Task.Delay(3000);
                    showDangerAlert = false;

                    StateHasChanged();
                }

            } else
            {
                alertMessage = $"Preencha todos os campos para editar um produto!";
                showDangerAlert = true;
                isDisabled = false;

                StateHasChanged();

                await Task.Delay(3000);
                showDangerAlert = false;

                StateHasChanged();
            }

        } else
        {
            if (await verificarCamposProduct(produto))
            {
                try
                {
                    if (produto.Categoria)
                    {
                        var query = await httpClient.PostAsJsonAsync<Product>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"insert\":{\"Categoria\":\"" + produto.Categoria + "\", \"Nome\":\"" + produto.Nome + "\", \"Descricao\":\"" + produto.Descricao + "\", \"EstadoDeConservacao\":\"" + produto.EstadoDeConservacao + "\"}}", null);
                    } else
                    {
                        var query = await httpClient.PostAsJsonAsync<Product>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"insert\":{\"Categoria\":\"" + produto.Categoria + "\", \"Nome\":\"" + produto.Nome + "\", \"NomeCientifico\":\"" + produto.NomeCientifico + "\", \"Classificacao\":\"" + produto.Classificacao + "\", \"TempoEstimado\":" + produto.TempoEstimado + ", \"Temperatura\":" + produto.Temperatura + ", \"Irrigacao\":" + produto.Irrigacao + ", \"ValorVenda\":" + produto.ValorVenda + "}}", null);
                    }

                    alertMessage = $"Produto cadastrado com sucesso!";
                    showSuccessAlert = true;
                    isDisabled = false;

                    StateHasChanged();

                    await Task.Delay(3000);
                    showSuccessAlert = false;

                    StateHasChanged();

                    var produtosArray = (await httpClient.GetFromJsonAsync<Product[]>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"Categoria\":false}}")).ToList();
                    if (produtosArray != null)
                    {
                        produtosExistentes = produtosArray.ToList();
                    }

                    produto = new Product();

                } catch
                {

                    alertMessage = $"Ocorreu um erro ao cadastrar o produto!<br>Tente novamente.";
                    showDangerAlert = true;
                    isDisabled = false;

                    StateHasChanged();

                    await Task.Delay(3000);
                    showDangerAlert = false;

                    StateHasChanged();
                }

            } else
            {
                alertMessage = $"Preencha todos os campos para criar um produto!";
                showDangerAlert = true;
                isDisabled = false;

                StateHasChanged();

                await Task.Delay(3000);
                showDangerAlert = false;

                StateHasChanged();
            }
        }

        isDisabled = false;
    }

    public async Task<bool> verificarCamposProduct<Product>(Product p)
    {
        var propriedadesIgnoradas = !produto.Categoria //se n for interno ignora isso 
            ? new[] { "ProdutoId", "Descricao", "EstadoDeConservacao" }
            : new[] { "ProdutoId", "NomeCientifico", "Classificacao", "TempoEstimado", "Temperatura", "Irrigacao", "ValorVenda" };

        foreach (var prop in typeof(Product).GetProperties())
        {
            if (propriedadesIgnoradas.Contains(prop.Name))//ignora tudo que pode ser null
                continue;

            var value = prop.GetValue(p);

            if (value == null || (value is string str && string.IsNullOrWhiteSpace(str)))
            {
                return false;
            }
        }
        return true;
    }



    private async void selectVenda()
    {
        produto = new Product();
        produto.Categoria = false;
        opcoes = [];

        var produtosArray = (await httpClient.GetFromJsonAsync<Product[]>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"Categoria\":false}}")).ToList();
        if (produtosArray != null)
        {
            produtosExistentes = produtosArray.ToList();
        }
    }

    private async void selectUso()
    {
        produto = new Product();
        produto.Categoria = true;
        opcoes = [];

        var produtosArray = (await httpClient.GetFromJsonAsync<Product[]>("https://rest-node-mztn.onrender.com/{\"tabela\":\"Produto\", \"where\":{\"Categoria\":true}}")).ToList();
        if (produtosArray != null)
        {
            produtosExistentes = produtosArray.ToList();
        }
    }

}
